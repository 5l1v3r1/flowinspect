flowinspect v0.1 - Ankur Tyagi (7h3rAm)
Juniper Networks - Security Research Group

A network traffic inspection utility. It uses pynids to defragment IP and reassemble TCP packets (UDP is inspected on a per-packet basis). Resulting flows are then inspected using the "re2" module that supports PCRE-like patterns, case-insensitive, invert and multiline matches, etc. In case re2 is not installed, Python's re module is used as a fallback. Match scope could be limited through BPF expressions or via Snort-like offset-depth content modifiers or packets/streams inspection limit flags. Flows could be logged to files in addition to being dumped on stdout. A few useful output modes help with further analysis.

Inspection could be requested with (multiple) regex patterns for CTS/STC/ANY directions. Inspection happens as traffic arrives and as such CTS matches (CTS regexes and ANY regexes) will be tested first. For TCP, first pattern match on a stream will be the last time it will be tested. For UDP, matches happen on a per-packet basis and as such for a stream, subsequent packets will be tested even after a match has already been found.


HELP:
        ______              _                            __ 
       / __/ /___ _      __(_)___  _________  ___  _____/ /_
      / /_/ / __ \ | /| / / / __ \/ ___/ __ \/ _ \/ ___/ __/
     / __/ / /_/ / |/ |/ / / / / (__  ) /_/ /  __/ /__/ /_  
    /_/ /_/\____/|__/|__/_/_/ /_/____/ .___/\___/\___/\__/  
                                    /_/                     
    
flowinspect.py v0.2 - A tool for network traffic inspection
Ankur Tyagi (7h3rAm) @ Juniper Networks Security Research Group

usage: flowinspect.py [-h] (-p --pcap | -d --device) [-c --cregex]
                      [-s --sregex] [-a --aregex] [-i] [-m] [-G --cfuzz]
                      [-H --sfuzz] [-I --afuzz] [-C --cdfa] [-S --sdfa]
                      [-A --adfa] [-P --cyararules] [-Q --syararules]
                      [-R --ayararules] [-X --dfaexpr] [-O --offset]
                      [-D --depth] [-T --maxinspstreams] [-U --maxinsppackets]
                      [-t --maxdispstreams] [-u --maxdisppackets]
                      [-b --maxdispbytes] [-w [logdir]]
                      [-o {quite,meta,hex,print,raw}] [-f --bpf]
                      [-g [graphdir]] [-r fuzzminthreshold] [-l] [-v] [-k]
                      [-n] [-M] [-V] [-L]

optional arguments:
  -h, --help            show this help message and exit
  -p --pcap             input pcap file
  -d --device           listening device
  -X --dfaexpr          expression to test chain members

RegEx per Direction:
  -c --cregex           regex to match against CTS data
  -s --sregex           regex to match against STC data
  -a --aregex           regex to match against ANY data

RegEx Flags:
  -i                    ignore case
  -m                    disable multiline match

Fuzzy Patterns per Direction:
  -G --cfuzz            string to fuzzy match against CTS data
  -H --sfuzz            string to fuzzy match against STC data
  -I --afuzz            string to fuzzy match against ANY data

DFAs per Direction ('m[0-9][1-9]=<dfa>'):
  -C --cdfa             DFA expression to match against CTS data
  -S --sdfa             DFA expression to match against STC data
  -A --adfa             DFA expression to match against ANY data

Yara Rules per Direction:
  -P --cyararules       Yara rules to match on CTS data
  -Q --syararules       Yara rules to match on STC data
  -R --ayararules       Yara rules to match on ANY data

Content Modifiers:
  -O --offset           bytes to skip before matching
  -D --depth            bytes to look at while matching (starting from offset)

Inspection Limits:
  -T --maxinspstreams   max streams to inspect
  -U --maxinsppackets   max packets to inspect

Display Limits:
  -t --maxdispstreams   max streams to display
  -u --maxdisppackets   max packets to display
  -b --maxdispbytes     max bytes to display

Output Options:
  -w [logdir]           write matching packets/streams
  -o {quite,meta,hex,print,raw}
                        match output mode

Misc. Options:
  -f --bpf              BPF expression
  -g [graphdir]         generate DFA transitions graph
  -r fuzzminthreshold   threshold for fuzzy match (1-100)
  -l                    switch default boolean operator to 'or'
  -v                    invert match
  -k                    kill matching TCP stream
  -n                    confirm before initializing NIDS
  -M                    enable shellcode detection
  -V                    verbose output
  -L                    enable linemode (disables inspection)


EXAMPLES:
1. Look at HTTP sessions:
# ./flowinspect.py -d eth0 -c "^(GET|POST|HEAD|PUT).*" -f "tcp and port 80" -o print

2. Stop Metasploit .jar downloads:
# ./flowinspect.py -d eth0 -s "PK\x03\x04.*metasploit" -k

3. Quickly scan for Blackhole Exploit Kit infections (enable multiline match and restrict display to max 64B):
# ./flowinspect.py -d eth0 -c "/forum/links/(column|news)\.php\?\w+=(\d\w:?)+" -mb64

4. Inspect HTTP streams for Metasploit ie_cgenericelement_uaf exploit (CVE-2013-1347):
# ./flowinspect.py -p msfiecgenericelement.pcap -s "CollectGarbage\(\);.*mstime_malloc\({shellcode:magenta, heapBlockSize:0x38, objId:"myanim"}\);" -f "not udp"


INSTALLATION:
Make sure you have a working Python installation. The only other dependency is pynids which you can grab from here: http://jon.oberheide.org/pynids/. Reach out if you need help setting up pynids or for any other queries.

